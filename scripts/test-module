#!/bin/bash

# getopt test
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

# requirements tests
if [ ! -d "../../../parts" ]; then
  echo "You have to run this from within a parts/xxxxx/yyyyy (module) folder"
  exit
fi
files=$(ls tests/test*.py)
if [ -z "$files" ]; then
  echo "This module does not have any Python unit tests to call."
  exit
fi

# function to get stuff from odoo.cfg
odoocfgparm=
get_parm_from_odoocfg() {
  odoocfgparm=$(cat ../../../etc/odoo.cfg |grep $1 | sed -nr 's/^.*=\s//p' | awk '{$1=$1};1')
}

# parse command line options
withcoverage="yes"
databaseparm=
db_name=
OPTIONS=cd:
PARSED=$(getopt --options=$OPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"
while true; do
    case "$1" in
        -d)
            databaseparm="-d $2"
            db_name="$2"
            shift 2
            ;;
        -c)
            withcoverage="no"
            shift 1
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error."
            exit 3
    esac
done

# choose database
if [ -z "$databaseparm" ]; then
  get_parm_from_odoocfg db_name && db_name="$odoocfgparm"
  echo "Run this on a database with demo data."
  echo "Eg. 'test-module -d ${db_name}_demo'"
  echo "NOTE: this database needs to have the module installed!"
  exit
  # TODO: guess name of demo database if possible
  # DBNAME=$(psql -t -c "select datname from pg_database where datname like 'vwon_20%';")
fi

# module name to test
module=${PWD##*/}

# Test whether module is installed
get_parm_from_odoocfg db_password && db_password="$odoocfgparm"
get_parm_from_odoocfg db_user && db_username="$odoocfgparm"
installed=$(PGPASSWORD="$db_password" psql -t $db_name -h localhost -U "$db_username" -c "select count(id) from ir_module_module where name = '$module' and state = 'installed';")
if [ "$installed" -ne 1 ]; then
  echo Module $module not installed in database $db_name!
  exit
fi

# run all tests
odoo=../../../bin/start_odoo
if [ ! -x "$odoo" ]; then
  echo Script not found: $odoo. Cannot run tests.
  exit
fi
coverage=$(which coverage)
if [ "$withcoverage" == "yes" ]; then
  odoo="$coverage run --rcfile=../../../.coveragerc --source $(pwd) $odoo"
fi
for file in $files
do
  fullpath="$(pwd)/$file"
  $odoo --workers=0 $databaseparm --log-level=test --xmlrpc-port=18079 --stop-after-init --test-file $fullpath
done
if [ "$withcoverage" == "yes" ]; then
  $coverage report
fi


